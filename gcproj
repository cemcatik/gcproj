#!/usr/bin/env bash
#
# gcproj is a utility to manage and switch between gcloud projects.

set -eou pipefail
IFS=$'\n\t'

CACHE_FILE="${XDG_CACHE_HOME:-$HOME/.cache}"/gcproj/cache
CACHE_TTL=${GCPROJ_CACHE_TTL:-86400}

usage() {
	cat <<"EOF"
  USAGE:
    gcproj               : list gcloud projects
    gcproj -r, --refresh : refresh gcproj cache and list
    gcproj <PROJECT_ID>  : switch to gcloud project <PROJECT_ID>
    gcproj -h, --help    : show this message
EOF
}

current_project() {
	gcloud config get project | head -n 1
}

list_projects() {
	refresh_if_stale
	list_from_cache
}

refresh_if_stale() {
	local cached_at=$(stat -f %m $CACHE_FILE)
	local now=$(date +%s)
	local threshold=$((now - CACHE_TTL))
	if [[ $cached_at -lt $threshold ]]; then
		refresh
	fi
}

refresh() {
	local projects="$(gcloud projects list)"
	mkdir -p $(dirname $CACHE_FILE)
	echo "$projects" >$CACHE_FILE
}

list_from_cache() {
	cat $CACHE_FILE
}

set_project() {
	gcloud config set project "${1}"
}

choose_project_fzf() {
	local choice="$(list_projects | sed 1d | fzf)"
	local selected="$(echo $choice | awk '{print $1}')"
	if [[ -z $selected ]]; then
		echo "error: no project selected"
		exit 0
	fi
	set_project $selected
}

list() {
	if hash fzf 2>/dev/null; then
		choose_project_fzf
	else
		list_projects
	fi
}

main() {
	if ! hash gcloud 2>/dev/null; then
		echo >&2 "gcloud is not installed"
		exit 1
	fi

	if [[ "$#" -eq 0 ]]; then
		list
	elif [[ "$#" -eq 1 ]]; then
		if [[ "${1}" == '-h' || "${1}" == '--help' ]]; then
			usage
		elif [[ "${1}" == '-r' || "${1}" == '--refresh' ]]; then
			refresh
			list
		else
			set_project "${1}"
		fi
	fi
}

main "$@"
