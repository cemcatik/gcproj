#!/usr/bin/env bash
#
# gcproj is a utility to manage and switch between gcloud projects.

set -eou pipefail
IFS=$'\n\t'

CACHE_FILE="${XDG_CACHE_HOME:-$HOME/.cache}"/gcproj/cache
CACHE_TTL=${GCPROJ_CACHE_TTL:-86400}
PREV_FILE="${XDG_CACHE_HOME:-$HOME/.cache}"/gcproj/previous

usage() {
	cat <<"EOF"
  USAGE:
    gcproj               : list gcloud projects
    gcproj -r, --refresh : refresh gcproj cache and list
    gcproj <PROJECT_ID>  : switch to gcloud project <PROJECT_ID>
    gcproj -             : switch to previous project
    gcproj -c, --current : show current gcloud project
    gcproj -h, --help    : show this message
EOF
}

current_project() {
	gcloud config get project | head -n 1
}

refresh() {
	local -r projects="$(gcloud projects list)"
	local -r cache_dir=$(dirname "$CACHE_FILE")
	mkdir -p "$cache_dir"
	echo "$projects" >"$CACHE_FILE"
}

refresh_if_stale() {
	local should_refresh
	should_refresh=true

	if [ -e "$CACHE_FILE" ]; then
		local -r cached_at=$(stat -f %m "$CACHE_FILE")
		local -r now=$(date +%s)
		local -r threshold=$((now - CACHE_TTL))

		if [[ $cached_at -gt $threshold ]]; then
			should_refresh=false
		fi
	fi

	if $should_refresh; then
		refresh
	fi
}

list_from_cache() {
	cat "$CACHE_FILE"
}

list_projects() {
	refresh_if_stale
	list_from_cache
}

read_previous() {
	if [ -e "$PREV_FILE" ]; then
		cat "$PREV_FILE"
	fi
}

save_previous() {
	local -r currentPrev=$(read_previous)
	if [[ "${currentPrev}" != "${1}" ]]; then
		echo "${1}" >"${PREV_FILE}"
	fi
}

set_project() {
	local -r prev="$(current_project)"

	gcloud config set project "${1}"

	if [[ "${prev}" != "${1}" ]]; then
		save_previous "${prev}"
	fi
}

swap_project() {
	if [ -e "$PREV_FILE" ]; then
		local -r prev="$(read_previous)"
		set_project "${prev}"
	fi
}

choose_project_fzf() {
	local -r choice="$(list_projects | sed 1d | fzf)"
	local -r selected="$(echo "$choice" | awk '{print $1}')"

	if [[ -z $selected ]]; then
		echo "error: no project selected"
		exit 0
	fi

	set_project "$selected"
}

list() {
	if hash fzf 2>/dev/null; then
		choose_project_fzf
	else
		list_projects
	fi
}

main() {
	if ! hash gcloud 2>/dev/null; then
		echo >&2 "gcloud is not installed"
		exit 1
	fi

	if [[ "$#" -eq 0 ]]; then
		list
	elif [[ "$#" -eq 1 ]]; then
		if [[ "${1}" == '-h' || "${1}" == '--help' ]]; then
			usage
		elif [[ "${1}" == '-r' || "${1}" == '--refresh' ]]; then
			refresh
			list
		elif [[ "${1}" == '-c' || "${1}" == '--current' ]]; then
			current_project
		elif [[ "${1}" == '-' ]]; then
			swap_project
		else
			set_project "${1}"
		fi
	fi
}

main "$@"
